# Euclidean Algorithm / ChocolatesByNumbers

# There are N chocolates in a circle. Count the number of chocolates you will eat.

'''
Two positive integers N and M are given. Integer N represents the number of chocolates arranged in a circle, numbered from 0 to N − 1.

You start to eat the chocolates. After eating a chocolate you leave only a wrapper.

You begin with eating chocolate number 0. Then you omit the next M − 1 chocolates or wrappers on the circle, and eat the following one.

More precisely, if you ate chocolate number X, then you will next eat the chocolate with number (X + M) modulo N (remainder of division).

You stop eating when you encounter an empty wrapper.

For example, given integers N = 10 and M = 4. You will eat the following chocolates: 0, 4, 8, 2, 6.

The goal is to count the number of chocolates that you will eat, following the above rules.

Write a function:

def solution(N, M)

that, given two positive integers N and M, returns the number of chocolates that you will eat.

For example, given integers N = 10 and M = 4. the function should return 5, as explained above.

Write an efficient algorithm for the following assumptions:

N and M are integers within the range [1..1,000,000,000].
'''

# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

import math

def solution(N, M):
    # Implement your solution here
    # The problem can be rephrased as finding the number of distinct values
    # generated by (k * M) % N for k = 0, 1, 2, ... until a repetition occurs.
    # This is equivalent to finding the smallest positive integer L such that
    # (L * M) % N == 0.
    # The number of unique chocolates eaten is then L.
    #
    # Mathematically, the number of unique chocolates eaten is given by:
    # N / GCD(N, M)
    # where GCD is the Greatest Common Divisor.

    # We use math.gcd for efficiency.
    # Python's math.gcd implements the Euclidean algorithm.
    common_divisor = math.gcd(N, M)
    
    # The number of unique chocolates eaten is N divided by their GCD.
    return N // common_divisor